import { model, time } from '@peter-murray/hue-bridge-model';
declare function isTimePattern(str: string): boolean;
export declare const v3Model: {
    lightStates: {
        LightState: typeof model.LightState;
        GroupLightState: typeof model.GroupState;
        SceneLightState: typeof model.SceneLightState;
    };
    timePatterns: {
        weekdays: typeof time.WEEKDAYS;
        isRecurring: typeof time.isRecurring;
        createAbsoluteTime: typeof createAbsoluteTime;
        createRandomizedTime: typeof createRandomizedTime;
        createRecurringTime: typeof createRecurringTime;
        createRecurringRandomizedTime: typeof createRecurringRandomizedTime;
        createTimeInterval: typeof createTimeInterval;
        createTimer: typeof createTimer;
        createRecurringTimer: typeof createRecurringTimer;
        createRandomizedTimer: typeof createRandomizedTimer;
        createRecurringRandomizedTimer: typeof createRecurringRandomizedTimer;
        createFromString: typeof time.createFromString;
        isTimePattern: typeof isTimePattern;
    };
    createEntertainment: typeof createEntertainment;
    createLightGroup: typeof createLightGroup;
    createRoom: typeof createRoom;
    createZone: typeof createZone;
    createCLIPGenericFlagSensor: typeof createCLIPGenericFlagSensor;
    createCLIPGenericStatusSensor: typeof createCLIPGenericStatusSensor;
    createCLIPHumiditySensor: typeof createCLIPHumiditySensor;
    createCLIPLightlevelSensor: typeof createCLIPLightlevelSensor;
    createCLIPOpenCloseSensor: typeof createCLIPOpenCloseSensor;
    createCLIPPresenceSensor: typeof createCLIPPresenceSensor;
    createCLIPTemperatureSensor: typeof createCLIPTemperatureSensor;
    createCLIPSwitchSensor: typeof createCLIPSwitchSensor;
    createLightScene: typeof createLightScene;
    createGroupScene: typeof createGroupScene;
    createSchedule: typeof createSchedule;
    actions: {
        light: (light: model.Light | string | number) => model.LightStateAction;
        group: (group: model.Group | number | string) => model.GroupStateAction;
        sensor: (sensor: model.Sensor | number | string) => model.SensorStateAction;
        scene: (scene: model.Scene | string) => model.SceneAction;
    };
    createRule: typeof createRule;
    ruleConditions: {
        sensor: (sensor: model.Sensor) => model.SensorCondition;
        group: (id: model.Group | string | number) => model.GroupCondition;
    };
    createResourceLink: typeof createResourceLink;
};
declare function createEntertainment(): model.Entertainment;
declare function createLightGroup(): model.LightGroup;
declare function createRoom(): model.Room;
declare function createZone(): model.Zone;
declare function createCLIPGenericFlagSensor(): model.CLIPGenericFlag;
declare function createCLIPGenericStatusSensor(): model.CLIPGenericStatus;
declare function createCLIPHumiditySensor(): model.CLIPHumidity;
declare function createCLIPLightlevelSensor(): model.CLIPLightlevel;
declare function createCLIPOpenCloseSensor(): model.CLIPOpenClose;
declare function createCLIPPresenceSensor(): model.CLIPPresence;
declare function createCLIPTemperatureSensor(): model.CLIPTemperature;
declare function createCLIPSwitchSensor(): model.CLIPSwitch;
declare function createLightScene(): model.LightScene;
declare function createGroupScene(): model.GroupScene;
declare function createSchedule(): model.Schedule;
declare function createRule(): model.Rule;
declare function createResourceLink(): model.ResourceLink;
declare function createAbsoluteTime(value: string | Date | time.AbsoluteTime): time.AbsoluteTime;
declare function createRandomizedTime(value: string | Date | time.RandomizedTime): time.RandomizedTime;
declare function createRecurringTime(weekdays: number, value: string | Date | time.RecurringTime): time.RecurringTime;
declare function createRecurringRandomizedTime(value: string | Date | time.RecurringRandomizedTime): time.RecurringRandomizedTime;
declare function createTimeInterval(value: string | time.TimeInterval): time.TimeInterval;
declare function createTimer(value: string | time.Timer): time.Timer;
declare function createRecurringTimer(value: string | Date | time.RecurringTimer): time.RecurringTimer;
declare function createRandomizedTimer(value: string | time.RandomizedTimer): time.RandomizedTimer;
declare function createRecurringRandomizedTimer(value: string | time.RecurringRandomizedTimer): time.RecurringRandomizedTimer;
export {};
