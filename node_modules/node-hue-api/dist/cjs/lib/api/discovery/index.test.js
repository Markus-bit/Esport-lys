"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const discovery = __importStar(require("./index"));
describe('discovery', () => {
    describe('#nupnpSearch()', () => {
        it('should discover a bridge', async () => {
            const results = await discovery.nupnpSearch();
            chai_1.expect(results).to.be.instanceOf(Array);
            chai_1.expect(results[0]).to.have.property('ipaddress');
            chai_1.expect(results[0]).to.have.property('config');
            const config = results[0].config;
            chai_1.expect(config).to.have.property('name');
            chai_1.expect(config).to.have.property('modelid');
            chai_1.expect(config).to.have.property('swversion');
        });
    });
    describe('#upnpSearch()', function () {
        this.timeout(10000);
        it('should discover a bridge', async () => {
            const results = await discovery.upnpSearch(3000);
            chai_1.expect(results).to.be.instanceOf(Array);
            chai_1.expect(results).to.have.length.greaterThan(0);
            chai_1.expect(results[0]).to.have.property('name');
            chai_1.expect(results[0]).to.have.property('ipaddress');
            chai_1.expect(results[0]).to.have.property('model');
            chai_1.expect(results[0].model).to.have.property('name');
            chai_1.expect(results[0].model).to.have.property('number');
            chai_1.expect(results[0].model).to.have.property('serial');
        });
    });
    describe('#description()', function () {
        this.timeout(10000);
        let hostAddress;
        before(async () => {
            const results = await discovery.nupnpSearch();
            chai_1.expect(results).to.have.length.greaterThan(0);
            if (results[0]) {
                //TODO sort this out
                // @ts-ignore
                hostAddress = results[0].ipaddress;
            }
        });
        it('should discover a bridge', async () => {
            const result = await discovery.description(hostAddress);
            chai_1.expect(result).to.have.property('name');
            chai_1.expect(result).to.have.property('ipaddress');
            chai_1.expect(result).to.have.property('model');
            // @ts-ignore
            chai_1.expect(result.model).to.have.property('name');
            // @ts-ignore
            chai_1.expect(result.model).to.have.property('number');
            // @ts-ignore
            chai_1.expect(result.model).to.have.property('serial');
        });
    });
});
