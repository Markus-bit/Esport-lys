"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const bridgeValidation = __importStar(require("./bridge-validation"));
const testValues = require('../../../test/support/testValues');
describe('bridge-validation', () => {
    describe('#parseXmlDescription()', () => {
        it('should extract description from XML', () => {
            const data = '<root xmlns="urn:schemas-upnp-org:device-1-0">\n' +
                '<specVersion>\n' +
                '<major>1</major>\n' +
                '<minor>0</minor>\n' +
                '</specVersion>\n' +
                '<URLBase>https://192.168.1.130:80/</URLBase>\n' +
                '<device>\n' +
                '<deviceType>urn:schemas-upnp-org:device:Basic:1</deviceType>\n' +
                '<friendlyName>Philips hue (192.168.1.130)</friendlyName>\n' +
                '<manufacturer>Royal Philips Electronics</manufacturer><manufacturerURL>https://www.philips.com</manufacturerURL>\n' +
                '<modelDescription>Philips hue Personal Wireless Lighting</modelDescription>\n' +
                '<modelName>Philips hue bridge 2012</modelName>\n' +
                '<modelNumber>929000226503</modelNumber>\n' +
                '<modelURL>https://www.meethue.com</modelURL>\n' +
                '<serialNumber>001788102201</serialNumber>\n' +
                '<UDN>uuid:2f402f80-da50-11e1-9b23-001788102201</UDN>\n' +
                '<presentationURL>index.html</presentationURL>\n' +
                '<iconList>\n' +
                '<icon>\n' +
                '<mimetype>image/png</mimetype>\n' +
                '<height>48</height>\n' +
                '<width>48</width>\n' +
                '<depth>24</depth>\n' +
                '<url>hue_logo_0.png</url>\n' +
                '</icon>\n' +
                '<icon>\n' +
                '<mimetype>image/png</mimetype>\n' +
                '<height>120</height>\n' +
                '<width>120</width>\n' +
                '<depth>24</depth>\n' +
                '<url>hue_logo_3.png</url>\n' +
                '</icon>\n' +
                '</iconList>\n' +
                '</device>\n' +
                '</root>';
            const result = bridgeValidation.parseXmlDescription(data);
            chai_1.expect(result).to.have.property('name').to.equal('Philips hue (192.168.1.130)');
            chai_1.expect(result).to.have.property('manufacturer').to.equal('Royal Philips Electronics');
            chai_1.expect(result).to.have.property('ipaddress').to.equal('192.168.1.130');
            chai_1.expect(result).to.have.property('model');
            chai_1.expect(result.model).to.have.property('number').to.equal('929000226503');
            chai_1.expect(result.model).to.have.property('description').to.equal('Philips hue Personal Wireless Lighting');
            chai_1.expect(result.model).to.have.property('name').to.equal('Philips hue bridge 2012');
            chai_1.expect(result.model).to.have.property('serial').to.equal('001788102201');
            chai_1.expect(result).to.have.property('icons');
            chai_1.expect(result.icons).to.be.instanceOf(Array).to.have.length.greaterThan(0);
            // @ts-ignore
            let icon = result.icons[0];
            chai_1.expect(icon).to.have.property('mimetype').to.equal('image/png');
            chai_1.expect(icon).to.have.property('height').to.equal('48');
            chai_1.expect(icon).to.have.property('width').to.equal('48');
            chai_1.expect(icon).to.have.property('depth').to.equal('24');
            chai_1.expect(icon).to.have.property('url').to.equal('hue_logo_0.png');
            // @ts-ignore
            icon = result.icons[1];
            chai_1.expect(icon).to.have.property('mimetype').to.equal('image/png');
            chai_1.expect(icon).to.have.property('height').to.equal('120');
            chai_1.expect(icon).to.have.property('width').to.equal('120');
            chai_1.expect(icon).to.have.property('depth').to.equal('24');
            chai_1.expect(icon).to.have.property('url').to.equal('hue_logo_3.png');
        });
    });
    describe('#getBridgeConfig()', () => {
        it('should get config on a valid bridge', async () => {
            const ipAddress = '192.168.10.40'; //TODO hard coded
            const config = await bridgeValidation.getBridgeConfig({ internalipaddress: ipAddress }, 5000);
            chai_1.expect(config).to.have.property('name').to.equal('Philips hue');
            chai_1.expect(config).to.have.property('ipaddress').to.equal(ipAddress);
            chai_1.expect(config).to.have.property('modelid');
            chai_1.expect(config).to.have.property('swversion');
        });
        it('should fail for invalid ip address', async function () {
            const ipAddress = '10.0.0.1', timeout = 2000;
            // Make test time out double that of the actual timeout on the request
            this.timeout(timeout * 2);
            try {
                await bridgeValidation.getBridgeConfig({ internalipaddress: ipAddress }, timeout);
                chai_1.expect.fail('Should have failed');
            }
            catch (err) {
                chai_1.expect(err.message).to.contain('network timeout');
            }
        });
    });
    describe('#getBridgeDescription()', () => {
        it('should get config on a valid bridge', async () => {
            const ipAddress = '192.168.10.40'; //TODO hard coded
            const config = await bridgeValidation.getBridgeDescription({ internalipaddress: ipAddress }, 5000);
            chai_1.expect(config).to.have.property('name').to.include('Philips hue');
            chai_1.expect(config).to.have.property('ipaddress').to.equal(ipAddress);
            chai_1.expect(config).to.have.property('model');
            chai_1.expect(config.model).to.have.property('number').to.equal('BSB002');
            chai_1.expect(config.model).to.have.property('name');
            chai_1.expect(config.model).to.have.property('description');
        });
        it('should fail for invalid ip address', async function () {
            const ipAddress = '10.0.0.1', timeout = 2000;
            // Make test time out double that of the actual timeout on the request
            this.timeout(timeout * 2);
            try {
                await bridgeValidation.getBridgeDescription({ internalipaddress: ipAddress }, timeout);
                chai_1.expect.fail('Should have failed');
            }
            catch (err) {
                chai_1.expect(err.message).to.contain('network timeout');
            }
        });
    });
});
