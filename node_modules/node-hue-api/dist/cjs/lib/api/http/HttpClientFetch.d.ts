/// <reference types="node" />
import { Agent as HttpsAgent } from 'https';
import { Agent as HttpAgent } from 'http';
export declare type HTTPHeaders = {
    [key: string]: string;
};
declare type HttpClientFetchConfig = {
    headers?: HTTPHeaders;
    baseURL?: string;
    httpAgent?: HttpAgent;
    httpsAgent?: HttpsAgent;
};
declare type AgentConfig = {
    agent?: HttpAgent | HttpsAgent;
    httpAgent?: HttpAgent;
    httpsAgent?: HttpsAgent;
};
export declare type RequestConfig = {
    json?: boolean;
    data?: object | string;
    url: string;
    headers?: HTTPHeaders;
    method: string;
    timeout?: number;
    params?: {
        [key: string]: string;
    };
    validateStatus?: Function;
} & AgentConfig;
export declare type FetchResult = {
    status: number;
    data?: any;
    config?: {
        [key: string]: any;
    };
    headers?: HTTPHeaders;
};
export declare class HttpClientFetch {
    private _config;
    constructor(config?: HttpClientFetchConfig);
    get headers(): HTTPHeaders;
    get baseURL(): string | undefined;
    get hasBaseUrl(): boolean;
    refreshAuthorizationHeader(token: string): void;
    getAgent(url: string, config: RequestConfig): HttpsAgent | HttpAgent | undefined;
    getUrl(url: string): string;
    request(req: RequestConfig): Promise<FetchResult>;
}
export declare function create(config?: HttpClientFetchConfig): HttpClientFetch;
export declare function request(req: RequestConfig): Promise<FetchResult>;
export {};
