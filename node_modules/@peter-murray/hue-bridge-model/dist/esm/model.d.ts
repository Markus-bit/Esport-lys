import * as ConditionOperators from './model/rules/conditions/operators';
import { Group } from './model/groups/Group';
import { Sensor } from './model/sensors/Sensor';
import { Light } from './model/Light';
import { Scene } from './model/scenes/Scene';
import { LightState } from './model/lightstate/LightState';
import { GroupState } from './model/lightstate/GroupState';
import { SceneLightState } from './model/lightstate/SceneLightState';
import { SensorCondition } from './model/rules/conditions/SensorCondition';
import { GroupCondition } from './model/rules/conditions/GroupCondition';
import { LightStateAction } from './model/actions/LightStateAction';
import { GroupStateAction } from './model/actions/GroupStateAction';
import { SensorStateAction } from './model/actions/SensorStateAction';
import { SceneAction } from './model/actions/SceneAction';
export * from './HueBridgeModelError';
export * from './model/BridgeObject';
export * from './model/BridgeObjectWithId';
export * from './model/ResourceLink';
export * from './model/Light';
export * from './model/Schedule';
export * from './model/groups/Group';
export * from './model/groups/Entertainment';
export * from './model/groups/LightGroup';
export * from './model/groups/Lightsource';
export * from './model/groups/Luminaire';
export * from './model/groups/Room';
export * from './model/groups/Zone';
export * from './model/scenes/GroupScene';
export * from './model/scenes/LightScene';
export * from './model/lightstate/LightState';
export * from './model/lightstate/GroupState';
export * from './model/lightstate/SceneLightState';
export * from './model/sensors/Sensor';
export * from './model/sensors/CLIPGenericFlag';
export * from './model/sensors/CLIPGenericStatus';
export * from './model/sensors/CLIPHumidity';
export * from './model/sensors/CLIPLightlevel';
export * from './model/sensors/CLIPOpenClose';
export * from './model/sensors/CLIPPresence';
export * from './model/sensors/CLIPSwitch';
export * from './model/sensors/CLIPTemperature';
export * from './model/sensors/Daylight';
export * from './model/sensors/ZGPSwitch';
export * from './model/sensors/ZLLLightlevel';
export * from './model/sensors/ZLLPresence';
export * from './model/sensors/ZLLSwitch';
export * from './model/sensors/ZLLTemperature';
export * from './model/sensors/GeoFence';
export * from './model/rules/Rule';
export * from './model/rules/conditions/SensorCondition';
export * from './model/rules/conditions/GroupCondition';
export * from './model/rules/conditions/RuleCondition';
export * from './model/actions/LightStateAction';
export * from './model/actions/SensorStateAction';
export * from './model/actions/GroupStateAction';
export * from './model/actions/SceneAction';
export * from './model/scenes/Scene';
export * from './model/BridgeConfiguration';
export * from './model/Capabilities';
export declare type BridgeJsonPayload = {
    [name: string]: any;
    type: string;
    version: number;
};
export declare const lightStates: {
    LightState: typeof LightState;
    GroupLightState: typeof GroupState;
    SceneLightState: typeof SceneLightState;
};
export declare const ruleConditionOperators: {
    equals: import("./model/rules/conditions/RuleConditionOperator").RuleConditionOperator;
    changed: import("./model/rules/conditions/RuleConditionOperator").RuleConditionOperator;
    changedDelayed: import("./model/rules/conditions/RuleConditionOperator").RuleConditionOperator;
    greaterThan: import("./model/rules/conditions/RuleConditionOperator").RuleConditionOperator;
    lessThan: import("./model/rules/conditions/RuleConditionOperator").RuleConditionOperator;
    stable: import("./model/rules/conditions/RuleConditionOperator").RuleConditionOperator;
    notStable: import("./model/rules/conditions/RuleConditionOperator").RuleConditionOperator;
    in: import("./model/rules/conditions/RuleConditionOperator").RuleConditionOperator;
    notIn: import("./model/rules/conditions/RuleConditionOperator").RuleConditionOperator;
    getOperator: typeof ConditionOperators.getOperator;
};
export declare const actions: {
    light: (light: Light | number | string) => LightStateAction;
    group: (group: Group | number | string) => GroupStateAction;
    sensor: (sensor: Sensor | number | string) => SensorStateAction;
    scene: (scene: Scene | string) => SceneAction;
};
export declare const ruleConditions: {
    sensor: (sensor: Sensor) => SensorCondition;
    group: (id: string) => GroupCondition;
};
export declare const instanceChecks: {
    isLightInstance: (obj: any) => boolean;
    isSceneInstance: (obj: any) => boolean;
    isGroupSceneInstance: (obj: any) => boolean;
    isLightSceneInstance: (obj: any) => boolean;
    isRuleInstance: (obj: any) => boolean;
    isResourceLinkInstance: (obj: any) => boolean;
    isScheduleInstance: (obj: any) => boolean;
    isSensorInstance: (obj: any) => boolean;
    isGroupInstance: (obj: any) => boolean;
    isBridgeConfigurationInstance: (obj: any) => boolean;
};
export declare function createFromBridge(type: string, id: string | number | undefined, payload: object): any;
export declare function createFromJson(payload: BridgeJsonPayload): any;
